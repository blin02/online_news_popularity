summary(nutrient.scaled)
sapply(nutrient.scaled, sd)
#We need to calcualte the pairwise distances between observations.
d = dist(nutrient.scaled)
#Using the hclust() function, we define the linkage manner by which we will
#cluster our data.
fit.single = hclust(d, method = "single")
fit.complete = hclust(d, method = "complete")
fit.average = hclust(d, method = "average")
#Creating various dendrograms.
par(mfrow = c(1, 3))
plot(fit.single, hang = -1, main = "Dendrogram of Single Linkage")
plot(fit.complete, hang = -1, main = "Dendrogram of Complete Linkage")
plot(fit.average, hang = -1, main = "Dendrogram of Average Linkage")
#Cut the dendrogram into groups of data.
clusters.average = cutree(fit.average, k = 5)
clusters.average
#Viewing the groups of data.
table(clusters.average)
#Aggregating the original data by the cluster assignments.
aggregate(nutrient, by = list(cluster = clusters.average), median)
#Aggregating the scaled data by the cluster assignments.
aggregate(nutrient.scaled, by = list(cluster = clusters.average), median)
#Visualizing the groups in the dendrogram.
par(mfrow = c(1, 1))
plot(fit.average, hang = -1, main = "Dendrogram of Average Linkage\n5 Clusters")
rect.hclust(fit.average, k = 5)
loadAsDataFrame = function () {
json_file = "./marshable_article_detail.json"
json_data = fromJSON(file=json_file)
typeof(json_data)
json_data[1]
json_data2 <- lapply(json_data, function(x) {
x[sapply(x, is.null)] <- NA
unlist(x)
})
as.data.frame(do.call("rbind", json_data2), stringsAsFactors = FALSE)
}
articles = loadAsDataFrame()
library("jsonlite")
articles = loadAsDataFrame()
loadAsDataFrame = function () {
json_file = "./marshable_article_detail.json"
json_data = fromJSON(json_file)
typeof(json_data)
json_data[1]
json_data2 <- lapply(json_data, function(x) {
x[sapply(x, is.null)] <- NA
unlist(x)
})
as.data.frame(do.call("rbind", json_data2), stringsAsFactors = FALSE)
}
articles = loadAsDataFrame()
setwd('/Users/binlin/Documents/workspace/web_scraping/')
articles = loadAsDataFrame()
json_file = "./marshable_article_detail.json"
json_data = fromJSON(json_file)
typeof(json_data)
json_data[1]
json_data = fromJSON(json_file, simplifyDataFrame = TRUE)
typeof(json_data)
json_data[1]
json_data
summary(json_data)
json_data = fromJSON(json_file, simplifyDataFrame = TRUE)
typeof(json_data)
summary(json_data)
View(json_data)
?fromJSON
articles.reduced = select(articles, -content, -title, -topics, -link)
articles.reduced = select(articles, -content, -title, -topics, -link)
json_data = fromJSON(json_file, simplifyDataFrame = TRUE)
?fromJSON
typeof(json_data)
summary(json_data)
View(json_data)
articles.reduced = select(articles, -content, -title, -topics, -link)
library("jsonlite")
library(dplyr)
json_file = "./marshable_article_detail.json"
json_data = fromJSON(json_file, simplifyDataFrame = TRUE)
?fromJSON
typeof(json_data)
articles.reduced = select(articles, -content, -title, -topics, -link)
articles.reduced = select(articles, -content, -title, -topics, -link)
json_file = "./marshable_article_detail.json"
json_data = fromJSON(json_file, simplifyDataFrame = TRUE)
summary(json_data)
View(json_data)
articles.reduced = select(articles, -content, -title, -topics, -link)
articles.reduced = select(json_data, -content, -title, -topics, -link)
setwd('/Users/binlin/Documents/workspace/web_scraping/')
json_file = "./marshable_article_detail.json"
articles = fromJSON(json_file, simplifyDataFrame = TRUE)
articles.reduced = select(articles, -content, -title, -topics, -link)
typeof(articles.reduced)
summary(articles.reduced)
plot(articles.reduced$author, articles.reduced$shares)
setwd('/Users/binlin/Documents/DataScience/projects/web_scraping/web_sraping_app/data/')
json_file = "./marshable_article_detail.json"
articles = fromJSON(json_file, simplifyDataFrame = TRUE)
articles.reduced = select(articles, -content, -title, -topics, -link)
summary(articles.reduced)
write.csv(articles, 'articles.csv')
write.csv(articles.reduced, 'articles_reduced.csv')
articles = read.csv("./articles.csv", na.strings = "NA")
typeof(articles)
articles = read.csv("./articles.csv", na.strings = "NA", stringsAsFactors = FALSE)
shiny::runApp('~/Documents/DataScience/projects/web_scraping/web_sraping_app')
shiny::runApp('~/Documents/DataScience/projects/web_scraping/web_sraping_app')
shiny::runApp('~/Documents/DataScience/projects/web_scraping/web_sraping_app')
library("jsonlite")
#library("rjson")
library(dplyr)
setwd('/Users/binlin/Documents/DataScience/projects/web_scraping/web_sraping_app/data/')
json_file = "./marshable_article_detail.json"
articles = fromJSON(json_file, simplifyDataFrame = TRUE)
articles.reduced = select(articles, -content, -title, -topics, -link)
summary(articles.reduced)
articles = read.csv("./articles.csv", na.strings = "NA", stringsAsFactors = FALSE)
articles = fromJSON(json_file, simplifyDataFrame = TRUE)
articles$topics
json_file = "./marshable_article_detail.json"
articles = fromJSON(json_file, simplifyDataFrame = TRUE)
articles.reduced = select(articles, -content, -title, -topics, -link)
summary(articles.reduced)
write.csv(articles, 'articles.csv')
write.csv(articles.reduced, 'articles_reduced.csv')
articles$topics
articles$topics
json_file = "./marshable_article_detail.json"
articles = fromJSON(json_file, simplifyDataFrame = TRUE)
articles.reduced = select(articles, -content, -title, -topics, -link)
summary(articles.reduced)
#write.csv(articles, 'articles.csv')
#write.csv(articles.reduced, 'articles_reduced.csv')
#articles = read.csv("./articles.csv", na.strings = "NA", stringsAsFactors = FALSE)
articles$topics
setwd('/Users/binlin/Documents/DataScience/projects/web_scraping/web_sraping_app/data/')
json_file = "./marshable_article_detail.json"
articles = fromJSON(json_file, simplifyDataFrame = TRUE)
articles.reduced = select(articles, -content, -title, -topics, -link)
summary(articles.reduced)
write.csv(articles, 'articles.csv')
write.csv(articles.reduced, 'articles_reduced.csv')
articles$topics
paste(c('test', 'test2'), collapse = '')
paste(c('test', 'test2'), collapse = ' ')
paste(c('test', 'test2'), collapse = ',')
paste(c('test', 'test2'), collapse = ', ')
paste(articles$topics, collapse = ', ')
all.topics =paste(articles$topics, collapse = ', ')
install.packages('tm')
install.packages('wordcloud')
install.packages('memoise')
shiny::runApp('~/Documents/DataScience/projects/web_scraping/web_sraping_app')
library("jsonlite")
#library("rjson")
library(dplyr)
setwd('/Users/binlin/Documents/DataScience/projects/web_scraping/web_sraping_app/data/')
json_file = "./marshable_article_detail.json"
articles = fromJSON(json_file, simplifyDataFrame = TRUE)
articles.reduced = select(articles, -content, -title, -topics, -link)
summary(articles.reduced)
#write.csv(articles, 'articles.csv')
#write.csv(articles.reduced, 'articles_reduced.csv')
#articles = read.csv("./articles.csv", na.strings = "NA", stringsAsFactors = FALSE)
all.topics =paste(articles$topics, collapse = ', ')
group_by(all.topics)
group_by(as.data.frame(all.topics))
group_by(as.data.frame(all.topics, stringsAsFactors = FALSE))
df = group_by(as.data.frame(all.topics, stringsAsFactors = FALSE))
df = as.data.frame(all.topics, stringsAsFactors = FALSE)
df
head(df)
View(df)
strsplit(all.topics)
strsplit(all.topics, ', ')
df = as.data.frame(strsplit(all.topics, ', '), stringsAsFactors = FALSE)
View(df)
df = as.data.frame(strsplit(all.topics, ', '), names = c('topic'), stringsAsFactors = FALSE)
View(df)
df = as.data.frame(strsplit(all.topics, ', '), name = c('topic'), stringsAsFactors = FALSE)
View(df)
?as.data.frame
colnames(df) = c('topic')
View(df)
group_by(df$topic)
typeof(df)
group_by(df,topic)
totals = summarise(by_topic, total = sum(n))
by_topic = group_by(df,topic)
totals = summarise(by_topic, total = sum(n))
by_topic = group_by(df,topic)
totals = summarise(by_topic, total = sum(n))
by_topic = group_by(df,topic)
by_topic
totals = summarise(by_topic, total = sum(n))
totals = summarise(by_topic, total = sum())
totals
totals = summarise(by_topic, total = n())
totals
sorted_topic_counts = arrange(desc(n), totals) %>%
)
sorted_topic_counts = arrange(desc(n), totals)
by_topic = group_by(df,topic)
totals = summarise(by_topic, total = n())
sorted_topic_counts = arrange(desc(n), totals)
sorted_topic_counts = arrange(desc(n), by_topic)
by_topic = group_by(df,topic)
sorted_topic_counts = arrange(desc(n), by_topic)
totals = summarise(by_topic, total = n())
sorted_topic_counts = arrange(totals, total)
sorted_topic_counts
sorted_topic_counts = arrange(totals, desc(total))
sorted_topic_counts
all.topics =paste(articles$topics, collapse = ', ')
strsplit(all.topics, ', ')
topic.df = as.data.frame(strsplit(all.topics, ', '), stringsAsFactors = FALSE)
colnames(topic.df) = c('topic')
by_topic = group_by(topic.df,topic)
topic.counts = summarise(by_topic, total = n())
topic.counts = arrange(topic.counts, desc(total))
topic.counts
shiny::runApp('~/Documents/DataScience/projects/web_scraping/web_sraping_app')
install.packages("memoise")
install.packages("memoise")
install.packages("memoise")
install.packages("memoise")
install.packages("memoise")
install.packages("memoise")
install.packages("memoise")
install.packages("memoise")
install.packages("memoise")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
View(articles)
articles.reduced = select(articles, -X, id = X_id, -content, -title, -topics, -link)
View(articles)
View(articles.reduced)
summary(articles.reduced)
write.csv(articles, 'articles.csv')
write.csv(articles.reduced, 'articles_reduced.csv')
shiny::runApp()
shiny::runApp()
setwd('/Users/binlin/Documents/DataScience/projects/web_scraping/web_sraping_app/data/')
json_file = "./marshable_article_detail.json"
articles = fromJSON(json_file, simplifyDataFrame = TRUE)
articles = select(articles, -X, id = X_id)
articles.reduced = select(articles, -content, -title, -topics, -link)
summary(articles.reduced)
write.csv(articles, 'articles.csv')
write.csv(articles.reduced, 'articles_reduced.csv')
shiny::runApp('~/Documents/DataScience/projects/web_scraping/web_sraping_app')
setwd('/Users/binlin/Documents/DataScience/projects/web_scraping/web_sraping_app/data/')
json_file = "./marshable_article_detail.json"
articles = fromJSON(json_file, simplifyDataFrame = TRUE)
articles = select(articles, -X, id = X_id)
View(articles)
View(articles)
View(articles)
shiny::runApp('~/Documents/DataScience/projects/web_scraping/web_sraping_app')
setwd('/Users/binlin/Documents/DataScience/projects/web_scraping/web_sraping_app/data/')
json_file = "./marshable_article_detail.json"
articles = fromJSON(json_file, simplifyDataFrame = TRUE)
articles = select(articles, -X, id = X_id)
articles.reduced = select(articles, -content, -title, -topics, -link)
summary(articles.reduced)
write.csv(articles, 'articles.csv', row.names=FALSE)
write.csv(articles.reduced, 'articles_reduced.csv', row.names=FALSE)
shiny::runApp('~/Documents/DataScience/projects/web_scraping/web_sraping_app')
setwd('/Users/binlin/Documents/DataScience/projects/web_scraping/web_sraping_app/data/')
json_file = "./marshable_article_detail.json"
articles = fromJSON(json_file, simplifyDataFrame = TRUE)
articles = select(articles, -X, id = X_id)
articles.reduced = select(articles, -content, -title, -topics, -link)
summary(articles.reduced)
write.csv(articles, 'articles.csv', row.names=FALSE)
write.csv(articles.reduced, 'articles_reduced.csv', row.names=FALSE)
View(articles)
shiny::runApp('~/Documents/DataScience/projects/web_scraping/web_sraping_app')
shiny::runApp('~/Documents/DataScience/projects/web_scraping/web_sraping_app')
setwd('/Users/binlin/Documents/DataScience/projects/web_scraping/web_sraping_app/data/')
json_file = "./marshable_article_detail.json"
articles = fromJSON(json_file, simplifyDataFrame = TRUE)
row.names(articles)<-NULL
shiny::runApp('~/Documents/DataScience/projects/web_scraping/web_sraping_app')
shiny::runApp('~/Documents/DataScience/projects/web_scraping/web_sraping_app')
?fromJSON
?fromJSON
library("jsonlite")
?fromJSON
?fromJSON
source('~/Documents/DataScience/projects/web_scraping/web_sraping_app/data.R')
source('~/Documents/DataScience/projects/web_scraping/web_sraping_app/data.R')
shiny::runApp('~/Documents/DataScience/projects/web_scraping/web_sraping_app')
shiny::runApp('~/Documents/DataScience/projects/web_scraping/web_sraping_app')
shiny::runApp('~/Documents/DataScience/projects/web_scraping/web_sraping_app')
articles.numeric = select(articles.reduced, -id, -author, -channel, -post_date, -shares)
articles.scaled = scale(articles.numeric)
articles.scaled$shares = articles.reduced$shares
articles.scaled = as.data.fram(scale(articles.numeric))
articles.scaled$shares = articles.reduced$shares
articles = read.csv("./articles.csv", na.strings = "NA", stringsAsFactors = FALSE)
articles.reduced = select(articles, -content, -title, -topics, -link)
articles.numeric = select(articles.reduced, -id, -author, -channel, -post_date, -shares)
articles.scaled = as.data.frame(scale(articles.numeric))
?scale
articles.scaled = as.data.frame(lapply(articles.numeric, scale(x)))
articles.scaled$shares = articles.reduced$shares
articles.numeric = select(articles.reduced, -id, -author, -channel, -post_date, -shares)
articles.scaled = as.data.frame(lapply(articles.numeric, scale(x)))
articles.scaled = as.data.frame(lapply(articles.numeric, scale(y)))
articles.scaled = as.data.frame(lapply(articles.numeric, function(x) scale(x)))
articles.scaled = as.data.frame(lapply(articles.numeric, function(x) scale(x)))
articles.scaled = as.data.frame(lapply(articles.numeric, function(x) scale(x)))
articles.numeric = select(articles.reduced, -id, -author, -channel, -post_date, -shares, -type)
articles.scaled = as.data.frame(lapply(articles.numeric, function(x) scale(x)))
articles.numeric = select(articles.reduced, -id, -author, -channel, -post_date, -shares, -type)
articles.scaled = scale(articles.numeric) #as.data.frame(lapply(articles.numeric, function(x) scale(x)))
View(articles.scaled)
View(articles.scaled)
articles.scaled = scale(articles.numeric, na.rm = TRUE) #as.data.frame(lapply(articles.numeric, function(x) scale(x)))
View(articles.scaled)
articles.scaled = scale(articles.numeric, na.rm = TRUE) #as.data.frame(lapply(articles.numeric, function(x) scale(x)))
articles.scaled = scale(articles.numeric, na.rm = TRUE) #as.data.frame(lapply(articles.numeric, function(x) scale(x)))
articles.scaled = scale(articles.numeric, na.rm = TRUE) #as.data.frame(lapply(articles.numeric, function(x) scale(x)))
articles.scaled = scale(articles.numeric, center=TRUE) #as.data.frame(lapply(articles.numeric, function(x) scale(x)))
View(articles.scaled)
articles.scaled = scale(articles.numeric, center=FALSE) #as.data.frame(lapply(articles.numeric, function(x) scale(x)))
View(articles.scaled)
shiny::runApp('~/Documents/DataScience/projects/web_scraping/web_sraping_app')
shiny::runApp('~/Documents/DataScience/projects/web_scraping/web_sraping_app')
shiny::runApp('~/Documents/DataScience/projects/web_scraping/web_sraping_app')
articles = read.csv("./articles.csv", na.strings = "NA", stringsAsFactors = FALSE)
articles.reduced = select(articles, -content, -title, -topics, -link)
articles.numeric = select(articles.reduced, -id, -author, -channel, -post_date, -shares, -type)
articles.scaled = as.data.frame(scale(articles.numeric))
articles.scaled$shares = articles.reduced$shares
articles.scaled$timedelta
shiny::runApp('~/Documents/DataScience/projects/web_scraping/web_sraping_app')
View(articles.scaled)
?scale
articles.numeric = select(articles.reduced, -id, -author, -channel, -post_date, -shares, -type)
articles.scaled = as.data.frame(scale(articles.numeric, center = FALSE, scale = apply(x, 2, sd, na.rm = TRUE)))
articles.scaled$shares = articles.reduced$shares
View(articles.scaled)
articles.numeric = select(articles.reduced, -id, -author, -channel, -post_date, -shares, -type)
articles.scaled = as.data.frame(scale(articles.numeric, center = FALSE, scale = apply(x, 2, sd, na.rm = TRUE)))
articles.scaled$shares = articles.reduced$shares
View(articles.scaled)
articles = read.csv("./articles.csv", na.strings = "NA", stringsAsFactors = FALSE)
articles.reduced = select(articles, -content, -title, -topics, -link)
articles.numeric = select(articles.reduced, -id, -author, -channel, -post_date, -shares, -type)
articles.scaled = as.data.frame(scale(articles.numeric, center = FALSE, scale = apply(x, 2, sd, na.rm = TRUE)))
articles.scaled$shares = articles.reduced$shares
articles.scaled = as.data.frame(scale(articles.numeric, center = FALSE, scale = max(dat$a, na.rm = TRUE)/100)))
articles.scaled = as.data.frame(scale(articles.numeric, center = FALSE, scale = max(dat$a, na.rm = TRUE)/100))
articles.scaled = as.data.frame(scale(articles.numeric, center = FALSE))
articles.scaled$shares = articles.reduced$shares
View(articles.scaled)
shiny::runApp('~/Documents/DataScience/projects/web_scraping/web_sraping_app')
View(articles.scaled)
shiny::runApp('~/Documents/DataScience/projects/web_scraping/web_sraping_app')
articles = read.csv("./articles.csv", na.strings = "NA", stringsAsFactors = FALSE)
articles.reduced = select(articles, -content, -title, -topics, -link)
articles.numeric = select(articles.reduced, -id, -author, -channel, -post_date, -shares, -type)
articles.scaled = as.data.frame(scale(articles.numeric))
View(articles.scaled)
View(articles)
shiny::runApp('~/Documents/DataScience/projects/web_scraping/web_sraping_app')
shiny::runApp('~/Documents/DataScience/projects/web_scraping/web_sraping_app')
articles = read.csv("./articles.csv", na.strings = "NA", stringsAsFactors = FALSE)
articles.reduced = select(articles, -content, -title, -topics, -link)
articles.numeric = select(articles.reduced, -id, -author, -channel, -post_date, -shares, -type)
articles.scaled = as.data.frame(scale(articles.numeric))
articles.scaled$shares = articles.reduced$shares
plot_share = ggplot(articles.scaled, aes(y = shares))
plot_share = plot_share + geom_smooth(aes(x = timedelta, colour = "timedelta"))
articles = read.csv("./articles.csv", na.strings = "NA", stringsAsFactors = FALSE)
articles.reduced = select(articles, -content, -title, -topics, -link)
articles.numeric = select(articles.reduced, -id, -author, -channel, -post_date, -shares, -type)
articles.scaled = as.data.frame(scale(articles.numeric))
articles.scaled$shares = articles.reduced$shares
plot_share = ggplot(articles.scaled, aes(y = shares))
plot_share = plot_share + geom_smooth(aes(x = timedelta, colour = "timedelta"))
plot_share
typeof(articles.scaled$timedelta)
is.na(articles.scaled$timedelta)
complete.cases(articles.scaled$timedelta)
plot_share
View(articles.scaled)
View(articles$timedelta)
View(articles)
?scale
scale(articles$timedelta)
scale(articles$timedelta, center=T)
articles.scaled = as.data.frame(scale(articles.numeric, scale = max(x, na.rm = TRUE)/100)))
articles = read.csv("./articles.csv", na.strings = "NA", stringsAsFactors = FALSE)
articles.reduced = select(articles, -content, -title, -topics, -link)
articles.numeric = select(articles.reduced, -id, -author, -channel, -post_date, -shares, -type)
articles.scaled = as.data.frame(scale(articles.numeric, scale = max(x, na.rm = TRUE)/100))
articles.scaled = as.data.frame(scale(articles.numeric, scale = max(x, na.rm = TRUE)/100))
plot_share = ggplot(articles, aes(y = shares))
plot_share = plot_share + geom_smooth(aes(x = timedelta, colour = "timedelta"))
plot_share
articles = read.csv("./articles.csv", na.strings = "NA", stringsAsFactors = FALSE)
plot_share = ggplot(articles, aes(y = shares))
plot_share = plot_share + geom_smooth(aes(x = timedelta, colour = "timedelta"))
plot_share
plot_share = ggplot(articles, aes(y = shares))
plot_share
plot_share = ggplot(articles, aes(y = shares))
plot_share = plot_share + geom_smooth(aes(x = timedelta, colour = "timedelta"))
plot_share
plot_share = ggplot(articles, aes(y = shares))
plot_share = plot_share + geom_point(aes(x = timedelta, colour = "timedelta"))
plot_share
plot_share = plot_share + geom_line(aes(x = timedelta, colour = "timedelta"))
plot_share
shiny::runApp('~/Documents/DataScience/projects/web_scraping/web_sraping_app')
shiny::runApp('~/Documents/DataScience/projects/web_scraping/web_sraping_app')
shiny::runApp('~/Documents/DataScience/projects/web_scraping/web_sraping_app')
shiny::runApp('~/Documents/DataScience/projects/web_scraping/web_sraping_app')
shiny::runApp('~/Documents/DataScience/projects/web_scraping/web_sraping_app')
shiny::runApp('~/Documents/DataScience/projects/web_scraping/web_sraping_app')
shiny::runApp('~/Documents/DataScience/projects/web_scraping/web_sraping_app')
articles = read.csv("./articles.csv", na.strings = "NA", stringsAsFactors = FALSE)
articles.reduced = select(articles, -content, -title, -topics, -link)
qplot(channel, data=articles.reduced, geom="bar", fill=channel)
articles = read.csv("./articles.csv", na.strings = "NA", stringsAsFactors = FALSE)
articles.reduced = select(articles, -content, -title, -topics, -link, channel = as.factor(channel))
qplot(channel, data=articles.reduced, geom="bar", fill=channel)
articles = read.csv("./articles.csv", na.strings = "NA", stringsAsFactors = FALSE)
articles.reduced = select(articles, -content, -title, -topics, -link, channel = as.factor(channel))
qplot(channel, data=articles.reduced, geom="bar", fill=channel)
summary(articles.reduced)
articles.reduced = select(articles, -content, -title, -topics, -link, channel = factor(channel))
summary(articles.reduced)
qplot(channel, data=articles.reduced, geom="bar", fill=channel)
head(articles.reduced)
articles = read.csv("./articles.csv", na.strings = "NA", stringsAsFactors = FALSE)
articles.reduced = select(articles, -content, -title, -topics, -link, channel = as.factor(channel))
articles.reduced$channel = as.factor(articles.reduced$channel)
summary(articles.reduced)
qplot(channel, data=articles.reduced, geom="bar", fill=channel)
qplot(channel, data=articles.reduced, geom="bar", fill=channel) + + coord_flip()
ggplot(articles.reduced, aes(channel), fill=channel) + geom_bar+ coord_flip()
shiny::runApp('~/Documents/DataScience/projects/web_scraping/web_sraping_app')
shiny::runApp('~/Documents/DataScience/projects/web_scraping/web_sraping_app')
articles = read.csv("./articles.csv", na.strings = "NA", stringsAsFactors = FALSE)
articles.reduced = select(articles, -content, -title, -topics, -link)
articles.reduced$channel = as.factor(articles.reduced$channel)
summary(articles.reduced)
ggplot(articles.reduced, aes(channel, fill=channel) + geom_bar
articles = read.csv("./articles.csv", na.strings = "NA", stringsAsFactors = FALSE)
articles.reduced = select(articles, -content, -title, -topics, -link)
articles.reduced$channel = as.factor(articles.reduced$channel)
summary(articles.reduced)
ggplot(articles.reduced, aes(channel, fill=channel) + geom_bar
ggplot(articles.reduced, aes(channel, fill=channel) + geom_bar()
ggplot(articles.reduced, aes(channel, fill=channel) + geom_bar()
ggplot(articles.reduced, aes(channel, fill=channel)) + geom_bar()
ggplot(articles.reduced, aes(channel, fill=channel)) + geom_bar()
articles = read.csv("./articles.csv", na.strings = "NA", stringsAsFactors = FALSE)
articles.reduced = select(articles, -content, -title, -topics, -link)
articles.reduced$channel = as.factor(articles.reduced$channel)
summary(articles.reduced)
ggplot(articles.reduced, aes(channel, fill=channel)) + geom_bar()
ggplot(articles.reduced, aes(channel, fill=channel)) + geom_bar()
ggplot(articles.reduced, aes(channel, fill=channel)) + geom_bar() + coord_flip()
articles.reduced$channel = as.factor(articles.reduced$channel, levels = articles.reduced$channel)
articles = read.csv("./articles.csv", na.strings = "NA", stringsAsFactors = FALSE)
articles.reduced = select(articles, -content, -title, -topics, -link)
articles.reduced$channel = as.factor(articles.reduced$channel, levels = articles.reduced$channel)
articles.reduced$channel = factor(articles.reduced$channel, levels = articles.reduced$channel)
articles = read.csv("./articles.csv", na.strings = "NA", stringsAsFactors = FALSE)
articles.reduced = select(articles, -content, -title, -topics, -link)
articles.reduced$channel = factor(articles.reduced$channel, levels = articles.reduced$channel)
?factor
articles.reduced$channel = factor(articles.reduced$channel, levels = articles.reduced$channel)
?as.factor
articles.reduced$channel = factor(articles.reduced$channel, levels = articles.reduced$channel)
ggplot(articles.reduced, aes(channel, fill=channel)) + geom_bar()
articles = read.csv("./articles.csv", na.strings = "NA", stringsAsFactors = FALSE)
articles.reduced = select(articles, -content, -title, -topics, -link)
articles.reduced$channel = factor(articles.reduced$channel, levels = articles.reduced$channel)
summary(articles.reduced)
ggplot(articles.reduced, aes(channel, fill=channel)) + geom_bar()
ggplot(articles.reduced, aes(channel, fill=channel)) + geom_bar()
?factor
articles.reduced$channel = factor(articles.reduced$channel, ordered = TRUE
ggplot(articles.reduced, aes(channel, fill=channel)) + geom_bar()
articles.reduced$channel = factor(articles.reduced$channel, ordered = TRUE
)
articles.reduced$channel = factor(articles.reduced$channel, ordered = TRUE)
ggplot(articles.reduced, aes(channel, fill=channel)) + geom_bar()
articles.reduced$channel2 = factor(articles.reduced$channel, levels=names(sort(table(articles.reduced$channel), decreasing=TRUE)))
ggplot(articles.reduced, aes(channel2, fill=channel)) + geom_bar()
shiny::runApp('~/Documents/DataScience/projects/web_scraping/web_sraping_app')
shiny::runApp('~/Documents/DataScience/projects/web_scraping/web_sraping_app')
shiny::runApp('~/Documents/DataScience/projects/web_scraping/web_sraping_app')
articles.filtered = articles.reduced[type %in% c('new'), ]
articles.filtered = articles.reduced[articles.reduced$type %in% c('new'), ]
View(articles.filtered)
shiny::runApp('~/Documents/DataScience/projects/web_scraping/web_sraping_app')
shiny::runApp('~/Documents/DataScience/projects/web_scraping/web_sraping_app')
shiny::runApp('~/Documents/DataScience/projects/web_scraping/web_sraping_app')
